from dataclasses import dataclass, field, asdict
from typing import Optional
import logging
import os

import numpy as np
from datasets import load_dataset

import torch
import transformers
from transformers import (
    AutoConfig,
    AutoModelForTokenClassification,
    AutoModelForSequenceClassification,
    AutoTokenizer,
    DataCollatorForTokenClassification,
    HfArgumentParser,
    PreTrainedTokenizerFast,
    Trainer,
    TrainingArguments,
    default_data_collator,
    set_seed,
)
from transformers.trainer_utils import is_main_process

from .utils import get_label_info, preprocess_dataset, compute_metrics
logger = logging.getLogger(__name__)


@dataclass
class ModelArguments:
    """
    Arguments pertaining to which model/config/tokenizer we are going to fine-tune from.
    """

    model_name_or_path: str = field(
        metadata={"help": "Path to pretrained model or model identifier from huggingface.co/models"}
    )
    config_name: Optional[str] = field(
        default=None, metadata={"help": "Pretrained config name or path if not the same as model_name"}
    )
    tokenizer_name: Optional[str] = field(
        default=None, metadata={"help": "Pretrained tokenizer name or path if not the same as model_name"}
    )
    cache_dir: Optional[str] = field(
        default=None,
        metadata={"help": "Where do you want to store the pretrained models downloaded from huggingface.co"},
    )


@dataclass
class DataTrainingArguments:
    """
    Arguments pertaining to what data we are going to input our model for training and eval.
    """

    task_name: Optional[str] = field(default="ner", metadata={"help": "The name of the task (ner, pos...)."})
    dataset_name: Optional[str] = field(
        default=None, metadata={"help": "The name of the dataset to use (via the datasets library)."}
    )
    dataset_config_name: Optional[str] = field(
        default=None, metadata={"help": "The configuration name of the dataset to use (via the datasets library)."}
    )
    train_file: Optional[str] = field(
        default=None, metadata={"help": "The input training data file (a csv or JSON file)."}
    )
    validation_file: Optional[str] = field(
        default=None,
        metadata={"help": "An optional input evaluation data file to evaluate on (a csv or JSON file)."},
    )
    test_file: Optional[str] = field(
        default=None,
        metadata={"help": "An optional input test data file to predict on (a csv or JSON file)."},
    )
    overwrite_cache: bool = field(
        default=False, metadata={"help": "Overwrite the cached training and evaluation sets"}
    )
    preprocessing_num_workers: Optional[int] = field(
        default=None,
        metadata={"help": "The number of processes to use for the preprocessing."},
    )
    pad_to_max_length: bool = field(
        default=False,
        metadata={
            "help": "Whether to pad all samples to model maximum sentence length. "
            "If False, will pad the samples dynamically when batching to the maximum length in the batch. More "
            "efficient on GPU but very bad for TPU."
        },
    )
    label_all_tokens: bool = field(
        default=False,
        metadata={
            "help": "Whether to put the label for one word on all tokens of generated by that word or just on the "
            "one (in which case the other tokens will have a padding index)."
        },
    )
    # added
    use_bbox: bool = field(
        default=False,
        metadata={
            "help": "Whether to use bbox column (for LayoutLM), which will force pad_to_max_length to true"
        },
    )
    # added
    sagemaker_output_path: str = field(
        default="./output",
        metadata={"help": "Path save final / best model (Sagemaker)"}
    )

    def __post_init__(self):
        if self.dataset_name is None and self.train_file is None and self.validation_file is None:
            raise ValueError("Need either a dataset name or a training/validation file.")
        else:
            if self.train_file is not None:
                extension = self.train_file.split(".")[-1]
                assert extension in ["csv", "json"], "`train_file` should be a csv or a json file."
            if self.validation_file is not None:
                extension = self.validation_file.split(".")[-1]
                assert extension in ["csv", "json"], "`validation_file` should be a csv or a json file."
        if self.use_bbox:
            self.pad_to_max_length = True
        self.task_name = self.task_name.lower()


def train_model(dict_args):
    # parse args dict
    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))
    model_args, data_args, training_args = parser.parse_dict(dict_args)

    if (
        os.path.exists(training_args.output_dir)
        and os.listdir(training_args.output_dir)
        and training_args.do_train
        and not training_args.overwrite_output_dir
    ):
        raise ValueError(
            f"Output directory ({training_args.output_dir}) already exists and is not empty."
            "Use --overwrite_output_dir to overcome."
        )

    # Setup logging
    logging.basicConfig(
        format="%(asctime)s - %(levelname)s - %(name)s -   %(message)s",
        datefmt="%m/%d/%Y %H:%M:%S",
        level=logging.INFO if is_main_process(training_args.local_rank) else logging.WARN,
    )

    # Log on each process the small summary:
    logger.warning(
        f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}"
        + f"distributed training: {bool(training_args.local_rank != -1)}, 16-bits training: {training_args.fp16}"
    )
    # Set the verbosity to info of the Transformers logger (on main process only):
    if is_main_process(training_args.local_rank):
        transformers.utils.logging.set_verbosity_info()
        transformers.utils.logging.enable_default_handler()
        transformers.utils.logging.enable_explicit_format()
    logger.info("Training/evaluation parameters %s", training_args)
    logger.info("Data Arguments %s", data_args)
    logger.info("Model Arguments %s", model_args)

    # Set seed before initializing model.
    set_seed(training_args.seed)
    
    # load datasets
    assert os.path.exists(data_args.train_file) and os.path.exists(data_args.validation_file) and os.path.exists(data_args.test_file)
    datasets = load_dataset("csv",
                            data_files={"train": data_args.train_file,
                                        "validation": data_args.validation_file,
                                        "test": data_args.test_file},
                            delimiter="\t",
                            cache_dir=model_args.cache_dir)
    logger.info("Datasets %s", datasets)
    logger.info("Column names %s", datasets["train"].column_names)
    logger.info("Sample example %s", datasets["train"][0])
    
    # get label information
    text_column_name = "text"
    label_column_name = "labels"
    bbox_column_name = "bbox"
    num_labels, label_to_id, id_to_label = get_label_info(datasets["train"][label_column_name], data_args.task_name)
    logger.info("num_labels %s", num_labels)
    logger.info("label_to_id %s", label_to_id)
    logger.info("id_to_label %s", id_to_label)
    
    # Load config, tokenizer and pre-trained model
    # For Distributed training: The .from_pretrained methods guarantee that only 
    # one local process can concurrently download model & vocab.
    if data_args.task_name == "regression":
        config = AutoConfig.from_pretrained(
            model_args.config_name if model_args.config_name else model_args.model_name_or_path,
            num_labels=num_labels,
            finetuning_task=data_args.task_name,
            cache_dir=model_args.cache_dir
            # for longformer : May adapt the attention_window=512 (default) in config
        )
    else:
        config = AutoConfig.from_pretrained(
            model_args.config_name if model_args.config_name else model_args.model_name_or_path,
            num_labels=num_labels,
            id2label=id_to_label,
            label2id=label_to_id,
            finetuning_task=data_args.task_name,
            cache_dir=model_args.cache_dir
            # for longformer : May adapt the attention_window=512 (default) in config
        )

    tokenizer = AutoTokenizer.from_pretrained(
        model_args.tokenizer_name if model_args.tokenizer_name else model_args.model_name_or_path,
        cache_dir=model_args.cache_dir,
        use_fast=True,
        add_prefix_space=True # for roberta tokenizer
    )

    if data_args.task_name == "ner":
        model = AutoModelForTokenClassification.from_pretrained(
            model_args.model_name_or_path,
            from_tf=bool(".ckpt" in model_args.model_name_or_path),
            config=config,
            cache_dir=model_args.cache_dir,
        )
    else:
        model = AutoModelForSequenceClassification.from_pretrained(
            model_args.model_name_or_path,
            from_tf=bool(".ckpt" in model_args.model_name_or_path),
            config=config,
            cache_dir=model_args.cache_dir
        )

    # Tokenizer check: this script requires a fast tokenizer.
    if not isinstance(tokenizer, PreTrainedTokenizerFast):
        raise ValueError(
            "This example script only works for models that have a fast tokenizer. Checkout the big table of models "
            "at https://huggingface.co/transformers/index.html#bigtable to find the model types that meet this "
            "requirement"
        )
        
    # Pre-process the datasets (tokenize words and align labels/bboxes if needed)
    padding = "max_length" if data_args.pad_to_max_length else False
    use_bbox = data_args.use_bbox
    tokenized_datasets = datasets.map(
        lambda x: preprocess_dataset(x, 
                                    tokenizer, 
                                    label_to_id, 
                                    data_args.label_all_tokens, 
                                    padding, 
                                    use_bbox,
                                    data_args.task_name),
        batched=True,
        num_proc=data_args.preprocessing_num_workers,
        load_from_cache_file=not data_args.overwrite_cache,
    )
    logger.info("Tokenized datasets %s", tokenized_datasets)
    logger.info("Column names %s", tokenized_datasets["train"].column_names)
    logger.info("Sample example %s", tokenized_datasets["train"][0])
    
    # Data collator. Used to pad the inputs of a single batch to the max size of this batch
    # Not needed if padding has already been done (if pad_to_max_length is true): default_data_collator
    # This does not work with bboxes. Hence pad_to_max_length is always True when using bboxes
    if data_args.pad_to_max_length:
        data_collator = default_data_collator
    else:
        if data_args.task_name == "ner":
            data_collator = DataCollatorForTokenClassification(tokenizer)
        else:
            data_collator = None # will default to DataCollatorWithPadding
    logger.info("Data Collator used %s", data_collator)

    # Initialize our Trainer
    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=tokenized_datasets["train"] if training_args.do_train else None,
        eval_dataset=tokenized_datasets["validation"] if training_args.do_eval else None,
        tokenizer=tokenizer,
        data_collator=data_collator,
        compute_metrics=lambda x: compute_metrics(x, id_to_label, data_args.task_name),
    )

    # Training
    if training_args.do_train:
        train_result = trainer.train(
            model_path=model_args.model_name_or_path if os.path.isdir(model_args.model_name_or_path) else None
        )
        # we save the final model (last or best) to the sagemaker output folder
        trainer.save_model(output_dir=data_args.sagemaker_output_path)  # It saves the tokenizer too for easy upload
        output_train_file = os.path.join(data_args.sagemaker_output_path, "train_results.txt")
        if trainer.is_world_process_zero():
            with open(output_train_file, "w") as writer:
                logger.info("***** Train results *****")
                for key, value in sorted(train_result.metrics.items()):
                    logger.info(f"  {key} = {value}")
                    writer.write(f"{key} = {value}\n")
            # Need to save the state, since Trainer.save_model saves only the tokenizer with the model
            trainer.state.save_to_json(os.path.join(data_args.sagemaker_output_path, "trainer_state.json"))
            # We also save the model_args and data_args for future use (training_args are already saved)
            torch.save(asdict(model_args), os.path.join(data_args.sagemaker_output_path, "model_args.bin"))
            torch.save(asdict(data_args), os.path.join(data_args.sagemaker_output_path, "data_args.bin"))
    
    # Evaluation (This will evaluate the final/best model on the dev set and write results
    results = {}
    if training_args.do_eval:
        logger.info("*** Evaluate best/final model on dev set ***")
        results = trainer.evaluate()
        output_eval_file = os.path.join(data_args.sagemaker_output_path, "eval_results.txt")
        if trainer.is_world_process_zero():
            with open(output_eval_file, "w") as writer:
                logger.info("***** Eval results *****")
                for key, value in results.items():
                    logger.info(f"  {key} = {value}")
                    writer.write(f"{key} = {value}\n")
                           
    # Evaluate and Predict on test set
    if training_args.do_predict:
        logger.info("*** Predict on test set ***")
        test_dataset = tokenized_datasets["test"]
        predictions, labels, metrics = trainer.predict(test_dataset, metric_key_prefix="test")
        if data_args.task_name == "classif":
            true_predictions = [id_to_label[p] for p in np.argmax(predictions, axis=1)]
        elif data_args.task_name == "regression":
            true_predictions = np.squeeze(predictions)
        elif data_args.task_name == "ner":
            predictions = np.argmax(predictions, axis=2)
            true_predictions = [
                [id_to_label[p] for (p, l) in zip(prediction, label) if l != -100]
                for prediction, label in zip(predictions, labels)
            ]
        output_test_results_file = os.path.join(data_args.sagemaker_output_path, "test_results.txt")
        if trainer.is_world_process_zero():
            with open(output_test_results_file, "w") as writer:
                for key, value in sorted(metrics.items()):
                    logger.info(f"  {key} = {value}")
                    writer.write(f"{key} = {value}\n")
        output_test_predictions_file = os.path.join(data_args.sagemaker_output_path, "test_predictions.txt")
        if trainer.is_world_process_zero():
            with open(output_test_predictions_file, "w") as writer:
                for prediction in true_predictions:
                    if data_args.task_name == "ner":
                        writer.write(" ".join(prediction) + "\n")
                    else:
                        writer.write(str(prediction) + "\n")
    return results
